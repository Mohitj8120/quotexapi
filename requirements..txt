# async def execute(argument):
#     match argument:
#         case "test_connection":
#             return await test_connection()
#         case "get_profile":
#             return await get_profile()
#         case "get_balance":
#             return await get_balance()
#         case "get_signal_data":
#             return await get_signal_data()
#         case "trade_and_monitor":
#             return await trade_and_monitor()
#         case "get_payout":
#             return await get_payout()
#         case "get_payout_by_asset":
#             return await get_payout_by_asset()
#         case "get_payment":
#             return await get_payment()
#         case "assets_open":
#             return await assets_open()
#         case "get_all_assets":
#             return await get_all_assets()
#         case "get_candle":
#             return await get_candle()
#         case "get_candle_v2":
#             return await get_candle_v2()
#         case "get_candles_all_asset":
#             return await get_candles_all_asset()
#         case "get_candle_progressive":
#             return await get_candle_progressive()
#         case "get_realtime_candle":
#             return await get_realtime_candle()
#         case "get_realtime_sentiment":
#             return await get_realtime_sentiment()
#         case "get_realtime_price":
#             return await get_realtime_price()
#         case "buy_simple":
#             return await buy_simple()
#         case "get_result":
#             return await get_result()
#         case "buy_and_check_win":
#             return await buy_and_check_win()
#         case "buy_multiple":
#             return await buy_multiple()
#         case "buy_pending":
#             return await buy_pending()
#         case "balance_refill":
#             return await balance_refill()
#         case "auto_trade":
#             return await auto_trade()
#         case "send_signal":
#             return await send_signal()
#         case "help":
#             print(f"Use: {'./app' if getattr(sys, 'frozen', False) else 'python app.py'} <option>")
#             return print(get_all_options())
#         case _:
#             return print("Invalid option. Use 'help' to get a list of options.")